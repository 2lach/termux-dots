#!/data/data/com.termux/files/usr/bin/bash

##########################
# ALIASES
##########################

## SHORTCUTS
# alias v="vim" | use function v instead
alias g="git"
alias c="clear"
alias e="exit"
alias qq="exit"
alias mkd="mkdir -v"
alias catt="bat --style=plain --theme='Visual Studio Dark+' --pager=never"
alias untar='tar xvf'
## LIST
alias l="exa -lah --sort=Name"
alias ll="exa --icons --sort=type --changed -aFxnG"
alias la="exa --icons -a"
alias lsa="exa --icons --sort=type -alh"

# GIT
alias gs="git status"
alias ga="git add"
alias gf="git fetch"
alias gp="git push"
alias gc="git commit"
alias gcm="git commit -m"

# MISC
alias shellformat="shfmt" # requires pkg 'shfmt'
alias npm-list-globals="npm list -g --depth=0"
alias gd="goodreads"

# OMZ
alias edit-zshrc="vim ~/.zshrc"
alias edit-zsh-local="vim $HOME/z-stuff/zsh.local"
alias edit-ohmyzsh="vim ~/.oh-my-zsh"

# PYTHON
alias pip2="/data/data/com.termux/files/usr/bin/pip"
alias pip="/data/data/com.termux/files/usr/bin/pip3"
alias pip-search="pip_search"

# pip search options:
# pip_search -s name
# pip_search -s version
# pip_search -s released

##########################
# FUNCTIONS
##########################
function vimrc() {
	vim $HOME/.vimrc
}

# vim
function v() {
	if [ "$#" -eq 0 ]; then
		vim .
	else
		vim "$@"
	fi
}

function replace_spaces() {
	# takes filenames containing spaces and
	# replaces the space with a underscore _
	for f in *\ *; do mv "$f" "${f// /_}"; done
}

function todo() {
	cd $HOME/z-stuff/notes >/dev/null
	date_format >>todo
	echo "" >>todo
	vim todo
	cd -1 >/dev/null
}

function o() {
	local open="/data/data/com.termux/files/usr/bin/termux-open"

	if [ "$#" -eq 0 ]; then
		emulate -L zsh $open
	else
		$open "$@"
	fi
}
alias open="o"

function clamscan_start() {
	# run clamscan recursive from current path
	local fresh="/data/data/com.termux/files/usr/bin/freshclam"
	local clams="/data/data/com.termux/files/usr/bin/clamscan"

	echo "* freshclam"
	$fresh
	echo "* clamscan start"
	$clams --recursive .
	echo "* clamscan end"
}

function lst() {

	# regex is int 0-9
	local re='^[0-9]+$'

	# no arg use default
	if [ $# -eq 0 ]; then
		exa --tree --level=2

	elif ! [[ $1 =~ $re ]]; then
		# $1 is Not a number"
		# meaning its likely a path/folder
		exa --tree --level=2 $1

	else
		# $1 exists and is a number meaning depth/level
		exa --tree --level=$1
	fi

}

function acp() {
	git add .
	git commit -m "$1"
	git push
}

function dus() {
	# show folders size then sort results by size
	du -d 1 -h | sort -hr
}

function duds() {
	# kinda the same as above
	du -sh */ | sort -nr
}

function feco() {
	# ANNOUNINCING
	# || LORD Feco of lolcat... ||
	echo ""
	echo "|| $@ ||" | lolcat
	echo ""
}

function compress() {
	# run with the pigz...
	# multithtreaded/parallell gzip with one arg
	printf " 🗜 making $1.tar.gz"
	[ -n "$1" ] && tar cf - "$1" | pigz -9 -p 32 >"$1".tar.gz && printf "\n parrallel gzip (🐷igz) finished"
}

function aptu() {
	# stole this from catalàins dotfiles
	# works better on ubuntu/debian then on termux
	feco "apt-get update"
	apt-get update

	feco "apt-get upgrade"
	apt-get upgrade -y

	feco "apt-get dist upgrade"
	apt-get dist-upgrade -y

	feco "apt-get autoclean & purge"
	apt-get autoclean && apt-get purge
}

function pip_pkg_update() {
	local pip="/data/data/com.termux/files/usr/bin/pip3"
	$pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 $pip install -U
}

function add_system_update_datestamp() {

	local date="/usr/bin/date"

	local termuxFiles="/data/data/com.termux/files"

	local SYSTEM_LOG="$termuxFiles/usr/var/log/sys_logs/system_updated.txt"

	(echo "System updated" | lolcat) >>$SYSTEM_LOG
	($date && echo "") >>$SYSTEM_LOG
}

function system_update() {

	feco "APT UPDATE"
	apt update
	apt full-upgrade -y

	feco "PKG UPGRADE"
	pkg update && pkg upgrade -y

	feco "CLEANUP"
	apt-get autoclean && apt-get purge
	pkg clean && pkg autoclean

	feco "UPDATE PIPS"
	pip_pkg_update
	pip cache purge

	feco "UPDATE GEMS"
	gem outdated
	gem update
	gem cleanup

	feco "UPDATE OMZ"
	omz update >/dev/null
	feco "omz update completed"

	add_system_update_datestamp
	feco "system update completed"
}

function howdoi() {
	if [[ -z $@ ]]; then
		$(which hors) --help
		echo 'wat you wanna know?'
	else
		$(which hors) "$@" -a -n 3 -p never
	fi
}

function add-new_book() {
	vim $HOME/z-stuff/books2022.txt
}

function ip_show_my_public() {
	myip="$(dig +short myip.opendns.com @resolver1.opendns.com)"
	echo "My WAN/Public IP address: ${myip}"
}

function convert-mkv-to-mp4() {
	ffmpeg -i "$1" -acodec ac3 -vcodec copy "$2"
}

function list-books() {
	cat $HOME/z-stuff/books2022.txt
}

function count-books() {
	# cat txtfile | sed ignore # and newlines | count remaining lines
	cat $HOME/z-stuff/books2022.txt | sed '/^\s*#/d;/^\s*$/d' | wc -l
}

function system_update_log() {
	# prints system updated logfile
	cat $SYSTEM_LOG

	#/data/data/com.termux/files/home/z-stuff/system_updated.txt
}

function date_format() {
	# prints date in format yyyy-mm-dd
	echo $(date '+%Y-%m-%d')
}
##########################
# ZSH SYSTEM TWEAKS
##########################

# a new command line being added to the history list duplicates an older one, the older command is removed from the list (even if it is not the previous event
setopt hist_ignore_all_dups

ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor)

##########################
# PLUGINS/SCRIPTS
# & PATH/COMPLETIONS
##########################

. $HOME/z-stuff/paths.sh
. $HOME/z-stuff/scripts/auto-ls.zsh
. $HOME/z-stuff/scripts/.secrets
. $HOME/z-stuff/plugins/*/*.plugin.zsh
. $HOME/z-stuff/scripts/man-colors.sh
# . $HOME/z-stuff/scripts/welcomeZ.sh

# cod > creates command completion with
# $ command -h
# cod.plugin.zsh loades in omz plugins (~/.zshrc)

# netlify cli
[[ -f ~/.config/tabtab/__tabtab.zsh ]] && . ~/.config/tabtab/__tabtab.zsh || true
# fzf finder
[ -f ~/.config/fzf/.fzf.zsh ] && source ~/.config/fzf/.fzf.zsh

##########################
