#!/bin/bash

##########################
# ALIASES
##########################

## SHORTCUTS
# alias v="vim" | use function v instead
alias g="git"
alias c="clear"
alias e="exit"
alias qq="exit"
alias mkd="mkdir -v"
alias bat="bat --style=plain --theme='ansi' --pager=never"

## LIST
alias ls="ls -A"
alias lla='ls -la'
alias las="lsd -A"
# alias l="exa -lah --sort=Name"
alias l="exa --icons --sort=type --changed -aFxnG"
alias la="exa --icons -a"
alias lsa="exa --icons --sort=type -alh"

# GIT
alias gs="git status"
alias ga="git add"
alias gf="git fetch"
alias gp="git push"
alias gc="git commit"
alias gcm="git commit -m"

# MISC
alias shellformat="shfmt" # requires pkg 'shfmt'
alias npm-list-globals="npm list -g --depth=0"
alias todo="todo.sh"

# OMZ
alias edit-zshrc="vim ~/.zshrc"
alias edit-zsh-local="vim $HOME/z-stuff/zsh.local"
alias edit-ohmyzsh="vim ~/.oh-my-zsh"

# PYTHON
alias pip2="/data/data/com.termux/files/usr/bin/pip"
alias pip="/data/data/com.termux/files/usr/bin/pip3"
alias pip-search="pip_search"

# pip search options:
# pip_search -s name
# pip_search -s version
# pip_search -s released

function vimrc() {
        vim $HOME/.vimrc
}

# vim
v() {
        if [ "$#" -eq 0 ]; then
                vim .
        else
                vim "$@"
        fi
}

o() {
        local open="/data/data/com.termux/files/usr/bin/termux-open"

        if [ "$#" -eq 0 ]; then
                emulate -L zsh $open
        else
                $open "$@"
        fi
}
alias open="o"

function clamscan_start() {
        local fresh="/data/data/com.termux/files/usr/bin/freshclam"
        local clams="/data/data/com.termux/files/usr/bin/clamscan"
        echo "* freshclam"
        $fresh
        echo "* clamscan start"
        $clams --recursive .
        echo "* clamscan end"
}

##########################
# FUNCTIONS
##########################

function tre() {
        if [ $# -eq 0 ]; then
                tree -L 2 -a
        else
                tree -L $1 -a
        fi
}

function lst() {
        if [ $# -eq 0 ]; then
                lsd -AF --depth 2 --tree
        else
                lsd -AF --depth $1 --tree
        fi
}

function acp() {
        git add .
        git commit -m "$1"
        git push
}

function dus() {
        # show folders size, then sort by size
        du -d 1 -h | sort -hr
}

function duds() {
        du -sh */ | sort -nr
}

function feco() {
        echo ""
        echo "|| $@ ||" | lolcat
        echo ""
}

function compress() {
        # run with the pigz...
        printf " 🗜 making $1.tar.gz"
        [ -n "$1" ] && tar cf - "$1" | pigz -9 -p 32 >"$1".tar.gz && printf "\n parrallel gzip (🐷igz) finished"
}

function aptu() {
        feco "apt-get update"
        apt-get update

        feco "apt-get upgrade"
        apt-get upgrade -y

        feco "apt-get dist upgrade"
        apt-get dist-upgrade -y

        feco "apt-get autoclean & purge"
        apt-get autoclean && apt-get purge
}

function UPDATE_PIP_PKG() {
        local pip="/data/data/com.termux/files/usr/bin/pip3"
        $pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 $pip install -U
}

function system_update() {

        feco "APT UPDATE"
        aptu

        feco "PKG UPGRADE"
        pkg update && pkg upgrade -y && pkg autoclean

        feco "AUTOCLEAN & PURGE"
        apt-get autoclean && apt-get purge

        feco "UPDATE PIPS"
        UPDATE_PIP_PKG
        pip cache purge

        feco "UPDATE GEMS"
        gem update
        gem cleanup

        feco "UPDATE OMZ"
        omz update

        figlet "UPDATE SYSTEM COMPLETE"
        local date="/data/data/com.termux/files/usr/bin/date"
        (echo "System updated" | lolcat && $date && echo "") >>/data/data/com.termux/files/home/z-stuff/system_updated.txt

}

function howdoi() {
        if [[ -z $@ ]]; then
                $(which hors) --help
                echo 'wat you wanna know?'
        else
                $(which hors) "$@" -a -n 3 -p never
        fi
}

function add-new_book() {
        vim $HOME/z-stuff/books2022.txt
}

function rsync-from-cafanistan() {
        if [[ -z $1 ]]; then
                echo 'gotta include path to directory you wanna dl'
        else
                rsync -vhEr --info=progress2 pi@$CAFANISTAN:$1 .
        fi
}

function rsync-to-cafanistan-from-local() {
        # rsync path/to/local_file remote_host:path/to/remote
        if [ -z "$1" ] && [ -z "$2" ]; then
                echo 'gotta include path to local file you wanna upload'
        else
                rsync -r --info=progress2 $1 pi@$CAFANISTAN:$2
        fi
}

function ip_show_my_public() {
        myip="$(dig +short myip.opendns.com @resolver1.opendns.com)"
        echo "My WAN/Public IP address: ${myip}"
}

function convert-mkv-to-mp4() {
        ffmpeg -i "$1" -acodec ac3 -vcodec copy "$2"
}

function count-books() {
        cat $HOME/z-stuff/books2022.txt | sed '/^\s*#/d;/^\s*$/d' | wc -l
}

##########################
# SYSTEM TWEAKS
##########################

# a new command line being added to the history list duplicates an older one, the older command is removed from the list (even if it is not the previous event
setopt hist_ignore_all_dups

ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor)

##########################
# SOURCE
# PLUGINS/SCRIPTS
# PATH/COMPLETIONS
##########################

. $HOME/z-stuff/paths.sh
. $HOME/z-stuff/scripts/auto-ls.zsh
. $HOME/z-stuff/scripts/.secrets
. $HOME/z-stuff/plugins/*/*.plugin.zsh
. $HOME/z-stuff/scripts/man-colors.sh
# . $HOME/z-stuff/scripts/greetings.sh

# cod > creates command completion with $ command -h
source <(cod init $$ zsh)
# netlify cli
[[ -f ~/.config/tabtab/__tabtab.zsh ]] && . ~/.config/tabtab/__tabtab.zsh || true
# fzf finder
[ -f ~/.config/fzf/.fzf.zsh ] && source ~/.config/fzf/.fzf.zsh

##########################
